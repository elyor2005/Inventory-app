datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  emailVerified Boolean   @default(false)
  name          String?
  image         String?
  role          String    @default("user")
  blocked       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  
  sessions          Session[]
  accounts          Account[]
  inventories       Inventory[]
  items             Item[]
  comments          Comment[]
  inventoryComments InventoryComment[]
  likes             Like[]
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
}

model Account {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  accountId             String
  providerId            String
  userId                String    @db.ObjectId
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  @@unique([providerId, accountId])
  @@index([userId])
}

model Verification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([identifier, value])
}

model Inventory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  category    String
  image       String?
  isPublic    Boolean  @default(false)

  creatorId   String   @db.ObjectId
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  items       Item[]
  discussions InventoryComment[]

  tags        String[]
  customFields Json     @default("[]")
  customIdFormat Json   @default("[]")
  allowedUsers String[] @db.ObjectId
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  version     Int      @default(0)
  
  @@index([creatorId])
  @@index([category])
}

model Item {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  tags        String[]
  customId    String?  // Generated custom ID for the item (e.g., "ITEM-001")


  integerValues Json?
  stringValues  Json?
  textValues    Json?
  booleanValues Json?
  dateValues    Json?

  inventoryId String   @db.ObjectId
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  creatorId   String   @db.ObjectId
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  comments    Comment[]
  likes       Like[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([inventoryId, customId])
  @@index([inventoryId])
  @@index([creatorId])
  @@index([tags])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  itemId    String   @db.ObjectId
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([itemId])
  @@index([authorId])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  itemId    String   @db.ObjectId
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([itemId, userId])
  @@index([itemId])
  @@index([userId])
}

model InventoryComment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  inventoryId String    @db.ObjectId
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  authorId    String    @db.ObjectId
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([inventoryId])
  @@index([authorId])
}